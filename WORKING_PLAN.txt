================================================================================
                        DRONE WARS - WORKING PLAN
================================================================================
Last Updated: 2025-09-27
See CLAUDE.md for architecture documentation and design decisions
See ROADMAP.md for long-term development plans and server implementation roadmap
================================================================================

CURRENT STATUS: Phase 3 - Server Implementation (Ready to Begin)
------------------------------------------------------------------------
âœ… COMPLETED TODAY (2025-09-28) - CRITICAL BUG FIXES:
- Fixed phase transition bugs preventing deployment â†’ action progression
- Fixed ActionProcessor method confusion (processTurnTransition vs processPhaseTransition)
- Fixed parameter name mismatches (nextPhase â†’ newPhase)
- Fixed AI decision structure handling for wrapped pass decisions
- Added GameDebugModal development tool for state inspection
- Established clear architecture patterns for phase vs turn transitions

âœ… COMPLETED (2025-09-27) - PHASE 2.12 COMPLETION:
- Fixed critical middle lane bonus calculation issues
- Completed GameDataService architecture migration (100% usage)
- Fixed Power Cell middle lane energy bonus (now correctly gives 12 energy instead of 10)
- Fixed Bridge middle lane hand limit bonus (now correctly gives 6 cards instead of 5)
- Updated cardDrawUtils.js to use GameDataService instead of hardcoded hand limits
- Fixed gameLogic.js initialPlayerState() energy initialization
- Cleaned up aiLogic.js to use only GameDataService for stat calculations
- Updated GameFlowManager.js to pass gameStateManager to performAutomaticDraw()

âœ… COMPLETED EARLIER:
- Removed AI turn management from App.jsx
- Expanded AIPhaseProcessor for deployment/action phases
- Fixed ActionProcessor AI delegation to use AIPhaseProcessor
- Added pass state validation before processing actions
- Created SequentialPhaseManager for turn-based phase control
- Fixed multiplayer detection (now uses gameMode !== 'local' consistently)

âœ… COMPLETED: Architecture Refactor & Testing
- Sequential phase management system is implemented
- Pass logic architecture violations fixed
- AI turn management centralized in SequentialPhaseManager
- AIPhaseProcessor now handles its own routing (executeDeploymentTurn/executeActionTurn)
- Development server running successfully with no compilation errors

âœ… COMPLETED: AIPhaseProcessor Self-Routing Implementation (2025-09-27)
- Problem Solved: SequentialPhaseManager was handling too much routing logic
- User Design Insight: "Why doesn't AIPhaseProcessor.js handle this routing? My design is that the AIPhaseProcessor would do this."
- Changes Made:
  * Added ActionProcessor and GameStateManager dependencies to AIPhaseProcessor.initialize()
  * Changed methods from handleDeploymentTurn() returning decisions to executeDeploymentTurn() performing actions
  * Added executePass() method for AI pass handling
  * Simplified SequentialPhaseManager.processAITurn() to just trigger AI execution
- Result: Clean architecture where AIPhaseProcessor manages its own routing internally

âœ… COMPLETED: Phase 2.12 - Component Data Flow Consistency (2025-09-27)
- **Achievement**: Complete GameDataService architecture migration (100% usage)
- **Problem Solved**: Fixed critical middle lane bonus calculation bugs
- **Root Cause**: Utility functions bypassed GameDataService with direct calculations
- **Technical Details**:
  * cardDrawUtils.js: Replaced hardcoded defaultHandLimit=5 with dynamic calculations
  * gameLogic.js: Fixed initialPlayerState() energy initialization with empty placedSections[]
  * aiLogic.js: Removed redundant calculateEffectiveShipStats parameter
  * GameFlowManager.js: Added gameStateManager parameter to performAutomaticDraw()
- **Result**: Power Cell middle lane = 12 energy, Bridge middle lane = 6 cards (bonuses work!)

âœ… COMPLETED: Documentation Reorganization (2025-09-27)
- Created ROADMAP.md for long-term vision and server implementation plans
- Refactored CLAUDE.md to focus purely on timeless architecture documentation
- WORKING_PLAN.txt now contains all current development status and recent changes

âœ… COMPLETED: Phase 2.11 - GameDataService Implementation (2025-09-27)
- **ACHIEVEMENT**: 100% centralization of ALL effective stats calculations (drone + ship)
- **SCALE**: Eliminated 78+ scattered calculation calls across 8+ files
- **ARCHITECTURE**: Complete data computation layer with intelligent caching
- **COMPONENTS CREATED**:
  * GameDataService.js - Centralized computation coordinator
  * gameDataCache.js - Performance optimization layer with state-change invalidation
  * useGameData.js hook - React integration for clean component access
- **MIGRATIONS COMPLETED**:
  * aiLogic.js: 22 calculateEffectiveStats calls â†’ GameDataService
  * App.jsx: 11 calculateEffectiveShipStats + 9 calculateEffectiveStats calls â†’ GameDataService
  * App.jsx playerEffectiveStats: Removed React useMemo, replaced with direct GameDataService calls
  * DroneLanesDisplay.jsx: 1 calculateEffectiveStats call â†’ GameDataService
  * ActionProcessor.js: 3 calculateEffectiveShipStats calls â†’ GameDataService
  * AIPhaseProcessor.js: 1 calculateEffectiveShipStats call â†’ GameDataService wrapper
- **DATA FLOW ACHIEVED**: GameStateManager â†” GameDataService â†” gameDataCache â†” gameLogic.js
- **BENEFITS**: Performance caching, clean architecture, server-ready abstraction, zero functional changes
- **VERIFICATION**: No App.jsx or component files contain direct calculation calls - 100% use GameDataService
- **RESULT**: Single data access layer for ALL computed game data (complete architectural consistency)

================================================================================

CURRENT ISSUE: Phase 2.13 - Stats Calculator Extraction
--------------------------------------------------------

ðŸŽ¯ CURRENT PRIORITY: Circular Dependency Resolution

**Problem Identified**: Circular dependency between gameLogic.js and GameDataService
- gameLogic.js provides calculateEffectiveShipStats and calculateEffectiveStats functions
- GameDataService imports from gameLogic.js to use these calculation functions
- gameLogic.js should use GameDataService for all stats calculations (9+ direct calls found)
- processRoundStart() passes function reference instead of calculated values, causing energy = 0 bug

**Root Cause Analysis**:
- Energy showing as 0 for both players due to function reference being passed
- Middle lane bonuses work in card drawing but not in energy initialization
- Architecture confusion: Should GameDataService or gameLogic.js be the source of truth?

**Phase 2.13 Implementation Plan**:
1. **Create statsCalculator.js**
   - Extract calculateEffectiveShipStats from gameLogic.js
   - Extract calculateEffectiveStats from gameLogic.js
   - Pure calculation functions with NO dependencies on GameDataService
   - No circular dependencies

2. **Update GameDataService**
   - Import calculation functions from statsCalculator.js instead of gameLogic.js
   - Maintain existing caching and API interface

3. **Update gameLogic.js**
   - Remove calculation function exports
   - Replace all 9+ direct calculation calls with GameDataService usage
   - Fix processRoundStart to use GameDataService.getEffectiveShipStats()
   - Ensure proper stats calculation instead of function references

4. **Critical Fixes This Enables**:
   - Power Cell middle lane energy bonus (12 energy instead of 0)
   - All round start energy calculations working correctly
   - Consistent caching across entire application
   - Clean architecture with no circular dependencies

**Expected Outcome**: Clean separation where statsCalculator.js provides pure calculation logic, GameDataService provides caching and abstraction, and gameLogic.js consumes calculated values through GameDataService.

ðŸŽ¯ ALTERNATIVE FUTURE PRIORITIES (Post Phase 2.12):

**Option A: Resume Modal Extraction (UI Architecture)**
- Extract remaining modals from App.jsx into dedicated components
- Complete App.jsx simplification for cleaner component hierarchy
- Benefits from completed GameDataService for clean data access
- Prepares UI layer for Phase 3 server implementation

**Option B: AI Enhancement & Game Features**
- Improve AI decision-making algorithms
- Add new game features, cards, or drones
- Enhanced AI personalities and strategies
- Leverage GameDataService for efficient AI computations

**Option C: Phase 3 Server Implementation**
- Begin server-side architecture migration
- Implement GameServer.js with centralized game instances
- Move GameStateManager and game logic to server
- Replace P2P multiplayer with client-server WebSocket communication

**Option D: Performance & Polish**
- Optimize gameDataCache usage patterns
- Add comprehensive testing suite
- Performance profiling and optimization
- Bug fixes and user experience improvements

**Option E: Development Tools & Debugging**
- Create developer tools for game state inspection
- Add debugging utilities for AI behavior analysis
- Implement game replay and analysis features
- Enhance development workflow

================================================================================

IMMEDIATE TESTING CHECKLIST
---------------------------
[ ] Human player passes â†’ no more action prompts
[ ] AI passes â†’ no more AI actions
[ ] Both players pass â†’ phase transitions correctly
[ ] AI automatically takes turn after 1.5s delay
[ ] Multiplayer mode doesn't trigger AI turns
[ ] Pass validation prevents actions after passing
[ ] Turn transitions work smoothly

================================================================================

FUTURE: Phase 3 - Server Implementation (When Selected)
--------------------------------------------------------
Priority 1: Create Server Layer
- server/GameServer.js - Central game instance
- server/SessionManager.js - Handle multiple game sessions
- server/PlayerConnectionManager.js - Manage player connections
- network/GameClient.js - Client-side network interface

Priority 2: Network Integration
- Remove current P2P (PeerJS) multiplayer system
- Replace with client-server WebSocket communication
- Update App.jsx to connect to server instead of direct game logic
- Route all actions through network layer to server

Priority 3: Server-Side Game Logic
- Move GameStateManager, GameFlowManager, SimultaneousActionManager to server
- Keep only UI state management on client (App.jsx)
- Implement server-side validation and anti-cheat measures
- Add spectator mode support

**ADVANTAGE**: GameDataService provides perfect abstraction layer for server migration

================================================================================

KNOWN ISSUES / BUGS
-------------------
- JSX syntax warnings in App.jsx (lines 4320-4357) - character "}" warnings

RECENTLY FIXED:
- âœ… Phase transition bugs (deployment â†’ action not working) - RESOLVED
- âœ… AI decision structure errors ("Cannot read properties of undefined") - RESOLVED
- âœ… ActionProcessor method confusion - RESOLVED
- âœ… Pass loop prevention - RESOLVED

================================================================================

QUICK NOTES
-----------
- AI is always player2 in single-player mode (gameMode === 'local')
- Multiplayer detection: check gameMode !== 'local' (NOT multiplayer.enabled)
- SequentialPhaseManager handles deployment & action phases
- SimultaneousActionManager handles droneSelection, deckSelection, placement, etc.
- ActionProcessor is the neutral engine for processing all actions
- AIPhaseProcessor is AI's equivalent to App.jsx for decision making
- GameDebugModal: Settings dropdown â†’ "Debug View" for game state inspection
- processPhaseTransition: Changes game phases (deployment â†’ action)
- processTurnTransition: Switches players within same phase

================================================================================

DEVELOPMENT REMINDERS
---------------------
- Run server: npm run dev (running on http://localhost:5173/)
- Always test changes with both single-player and multiplayer modes
- Check browser console for SequentialPhaseManager events
- GameStateManager is the single source of truth for game state

================================================================================