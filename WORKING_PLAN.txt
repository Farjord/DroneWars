================================================================================
                        DRONE WARS - WORKING PLAN
================================================================================
Last Updated: 2025-09-27
See CLAUDE.md for architecture documentation and design decisions
See ROADMAP.md for long-term development plans and server implementation roadmap
================================================================================

CURRENT STATUS: Phase 2.11 - GameDataService Implementation
--------------------------------------------------------
‚úÖ COMPLETED TODAY:
- Removed AI turn management from App.jsx
- Expanded AIPhaseProcessor for deployment/action phases
- Fixed ActionProcessor AI delegation to use AIPhaseProcessor
- Added pass state validation before processing actions
- Created SequentialPhaseManager for turn-based phase control
- Fixed multiplayer detection (now uses gameMode !== 'local' consistently)

‚úÖ COMPLETED: Architecture Refactor & Testing
- Sequential phase management system is implemented
- Pass logic architecture violations fixed
- AI turn management centralized in SequentialPhaseManager
- AIPhaseProcessor now handles its own routing (executeDeploymentTurn/executeActionTurn)
- Development server running successfully with no compilation errors

‚úÖ COMPLETED: AIPhaseProcessor Self-Routing Implementation (2025-09-27)
- Problem Solved: SequentialPhaseManager was handling too much routing logic
- User Design Insight: "Why doesn't AIPhaseProcessor.js handle this routing? My design is that the AIPhaseProcessor would do this."
- Changes Made:
  * Added ActionProcessor and GameStateManager dependencies to AIPhaseProcessor.initialize()
  * Changed methods from handleDeploymentTurn() returning decisions to executeDeploymentTurn() performing actions
  * Added executePass() method for AI pass handling
  * Simplified SequentialPhaseManager.processAITurn() to just trigger AI execution
- Result: Clean architecture where AIPhaseProcessor manages its own routing internally

‚úÖ COMPLETED: Documentation Reorganization (2025-09-27)
- Created ROADMAP.md for long-term vision and server implementation plans
- Refactored CLAUDE.md to focus purely on timeless architecture documentation
- WORKING_PLAN.txt now contains all current development status and recent changes

================================================================================

NEXT UP: Phase 2.11 - GameDataService Implementation
----------------------------------------------------
üéØ GOAL: Create centralized data computation layer to eliminate scattered calculateEffectiveStats calls

üìä CURRENT PROBLEM ANALYSIS:
‚Ä¢ 52 calculateEffectiveStats calls scattered across 6 files
‚Ä¢ Repeated parameter passing: (drone, lane, playerState, opponentState, placedSections)
‚Ä¢ Tight coupling between UI components and game logic
‚Ä¢ No caching of expensive calculations
‚Ä¢ Difficult to maintain and test

üóÇÔ∏è IMPLEMENTATION STRATEGY (4 Sub-Phases):

Phase 2.11.1: Infrastructure Creation (Priority: Critical)
‚Ä¢ Create GameDataService base class in src/services/
‚Ä¢ Implement core getEffectiveStats(drone, lane) wrapper
‚Ä¢ Add basic caching mechanism for performance
‚Ä¢ Create useGameData hook for React integration
‚Ä¢ Test with single component to validate approach

Phase 2.11.2: High-Impact Consumer Migration (Priority: High)
‚Ä¢ Refactor aiLogic.js - eliminate 22 calculateEffectiveStats calls
‚Ä¢ Update App.jsx modal calculations - eliminate 9 calls
‚Ä¢ Migrate DroneLanesDisplay.jsx - eliminate 1 call
‚Ä¢ Preserve all existing functionality during migration

Phase 2.11.3: State Manager Integration (Priority: Medium)
‚Ä¢ Update ActionProcessor - eliminate 3 calls
‚Ä¢ Update AIPhaseProcessor - eliminate 2 calls
‚Ä¢ Ensure seamless GameStateManager integration
‚Ä¢ Maintain existing manager coordination patterns

Phase 2.11.4: Testing & Optimization (Priority: Medium)
‚Ä¢ Performance testing with caching enabled
‚Ä¢ Integration testing across all consumers
‚Ä¢ Validate no gameplay logic regression
‚Ä¢ Optimize caching strategy based on usage patterns

‚ö†Ô∏è CRITICAL REQUIREMENTS TO PRESERVE:
‚Ä¢ All effective stats calculations must remain identical
‚Ä¢ No changes to game logic or combat resolution
‚Ä¢ Maintain performance (improve with caching)
‚Ä¢ Preserve multiplayer compatibility
‚Ä¢ Keep server-ready architecture principles

üìÅ PROPOSED FILE STRUCTURE:
src/services/
‚îú‚îÄ‚îÄ GameDataService.js (core service class)
‚îú‚îÄ‚îÄ gameDataCache.js (caching implementation)
‚îî‚îÄ‚îÄ gameDataUtils.js (helper functions)

src/hooks/
‚îî‚îÄ‚îÄ useGameData.js (React integration hook)

üöÄ IMPLEMENTATION ORDER:
1. GameDataService infrastructure with basic caching
2. aiLogic.js migration (highest usage - 22 calls)
3. App.jsx and UI component migration (10 calls total)
4. State manager integration (5 calls total)
5. Performance optimization and testing

‚úÖ SUCCESS CRITERIA:
‚Ä¢ 100% elimination of direct calculateEffectiveStats calls outside gameLogic.js
‚Ä¢ Performance improvement through caching
‚Ä¢ No gameplay functionality regression
‚Ä¢ Clean separation between data computation and UI
‚Ä¢ Foundation ready for modal extraction and server migration

üîó CONNECTION TO ARCHITECTURE:
‚Ä¢ Essential foundation before resuming modal extraction
‚Ä¢ Enables clean modal data access without tight coupling
‚Ä¢ Prepares data layer for Phase 3 server implementation
‚Ä¢ Aligns with server-ready architecture principles in CLAUDE.md

================================================================================

IMMEDIATE TESTING CHECKLIST
---------------------------
[ ] Human player passes ‚Üí no more action prompts
[ ] AI passes ‚Üí no more AI actions
[ ] Both players pass ‚Üí phase transitions correctly
[ ] AI automatically takes turn after 1.5s delay
[ ] Multiplayer mode doesn't trigger AI turns
[ ] Pass validation prevents actions after passing
[ ] Turn transitions work smoothly

================================================================================

NEXT UP: Phase 3 - Server Implementation
-----------------------------------------
Priority 1: Create Server Layer
- server/GameServer.js - Central game instance
- server/SessionManager.js - Handle multiple game sessions
- server/PlayerConnectionManager.js - Manage player connections
- network/GameClient.js - Client-side network interface

Priority 2: Network Integration
- Remove current P2P (PeerJS) multiplayer system
- Replace with client-server WebSocket communication
- Update App.jsx to connect to server instead of direct game logic
- Route all actions through network layer to server

Priority 3: Server-Side Game Logic
- Move GameStateManager, GameFlowManager, SimultaneousActionManager to server
- Keep only UI state management on client (App.jsx)
- Implement server-side validation and anti-cheat measures
- Add spectator mode support

================================================================================

KNOWN ISSUES / BUGS
-------------------
- JSX syntax warnings in App.jsx (lines 4320-4357) - character "}" warnings
- Need to verify AI turn triggering in deployment/action phases
- Should test pass logic thoroughly with both human and AI players

================================================================================

QUICK NOTES
-----------
- AI is always player2 in single-player mode (gameMode === 'local')
- Multiplayer detection: check gameMode !== 'local' (NOT multiplayer.enabled)
- SequentialPhaseManager handles deployment & action phases
- SimultaneousActionManager handles droneSelection, deckSelection, placement, etc.
- ActionProcessor is the neutral engine for processing all actions
- AIPhaseProcessor is AI's equivalent to App.jsx for decision making

================================================================================

DEVELOPMENT REMINDERS
---------------------
- Run server: npm run dev (running on http://localhost:5173/)
- Always test changes with both single-player and multiplayer modes
- Check browser console for SequentialPhaseManager events
- GameStateManager is the single source of truth for game state

================================================================================