import{G as p}from"./index-CwdDoFVz.js";const u=e=>{if(e.deck.length>0)return e;if(e.discardPile.length===0)return console.warn(`⚠️ ${e.name} has no cards left to draw (deck and discard both empty)`),e;const l=[...e.discardPile].sort(()=>.5-Math.random());return console.log(`🔄 ${e.name} reshuffled ${l.length} cards from discard pile into deck`),{...e,deck:l,discardPile:[]}},f=(e,l)=>{if(l<=0)return e;let a={...e};a=u(a);const s=a.deck.length,r=Math.min(l,s);if(r===0)return console.warn(`⚠️ ${e.name} cannot draw any cards (no cards available)`),a;const o=a.deck.slice(0,r),i=a.deck.slice(r),c=[...a.hand,...o];return console.log(`🃏 ${e.name} drew ${r} cards: ${o.map(d=>d.name).join(", ")}`),{...a,hand:c,deck:i}},h=(e,l)=>{if(l<=0)return{success:!0,message:"No cards to draw"};const a=e.deck.length+e.discardPile.length;return a===0?{success:!1,message:`${e.name} has no cards available to draw`}:l>a?{success:!1,message:`${e.name} cannot draw ${l} cards (only ${a} available)`}:{success:!0,message:"Draw operation valid"}},w=(e,l=null)=>{console.log("🃏 Starting automatic draw phase for both players");let a=null;l&&(a=p.getInstance(l));let s={...e};const r={player1:{drawnCards:[]},player2:{drawnCards:[]}};let o=5;if(a&&e.placedSections)try{o=a.getEffectiveShipStats(e.player1,e.placedSections).totals.handLimit,console.log(`📊 Player 1 effective hand limit: ${o} (with placed sections: ${e.placedSections.join(", ")})`)}catch(n){console.warn("⚠️ Failed to calculate Player 1 effective stats, using default hand limit:",n)}else console.warn("⚠️ GameDataService not available, using default hand limit for Player 1");const i=Math.max(0,o-e.player1.hand.length);if(i>0){const n=h(e.player1,i);if(n.success){const t=e.player1.hand.length;s.player1=f(e.player1,i),r.player1.drawnCards=s.player1.hand.slice(t)}else console.warn(`Player 1 draw validation failed: ${n.message}`)}else console.log(`🃏 Player 1 already at hand limit (${e.player1.hand.length}/${o})`);let c=5;if(a&&e.opponentPlacedSections)try{c=a.getEffectiveShipStats(e.player2,e.opponentPlacedSections).totals.handLimit,console.log(`📊 Player 2 effective hand limit: ${c} (with placed sections: ${e.opponentPlacedSections.join(", ")})`)}catch(n){console.warn("⚠️ Failed to calculate Player 2 effective stats, using default hand limit:",n)}else console.warn("⚠️ GameDataService not available, using default hand limit for Player 2");const d=Math.max(0,c-e.player2.hand.length);if(d>0){const n=h(e.player2,d);if(n.success){const t=e.player2.hand.length;s.player2=f(e.player2,d),r.player2.drawnCards=s.player2.hand.slice(t)}else console.warn(`Player 2 draw validation failed: ${n.message}`)}else console.log(`🃏 Player 2 already at hand limit (${e.player2.hand.length}/${c})`);return console.log("✅ Automatic draw phase completed"),{player1:s.player1,player2:s.player2,drawResults:r}};export{f as drawCardsForPlayer,w as performAutomaticDraw,u as reshuffleDiscardIntoDeck,h as validateDrawOperation};
