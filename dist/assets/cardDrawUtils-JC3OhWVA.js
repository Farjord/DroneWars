import{G as u,d as c}from"./index-Dj0YNUqb.js";const y=e=>{if(e.deck.length>0)return e;if(e.discardPile.length===0)return console.warn(`⚠️ ${e.name} has no cards left to draw (deck and discard both empty)`),e;const n=[...e.discardPile].sort(()=>.5-Math.random());return c("CARDS",`🔄 ${e.name} reshuffled ${n.length} cards from discard pile into deck`),{...e,deck:n,discardPile:[]}},h=(e,n)=>{if(n<=0)return e;let a={...e};a=y(a);const r=a.deck.length,s=Math.min(n,r);if(s===0)return console.warn(`⚠️ ${e.name} cannot draw any cards (no cards available)`),a;const i=a.deck.slice(0,s),t=a.deck.slice(s),d=[...a.hand,...i];return c("CARDS",`🃏 ${e.name} drew ${s} cards: ${i.map(o=>o.name).join(", ")}`),{...a,hand:d,deck:t}},p=(e,n)=>{if(n<=0)return{success:!0,message:"No cards to draw"};const a=e.deck.length+e.discardPile.length;return a===0?{success:!1,message:`${e.name} has no cards available to draw`}:n>a?{success:!1,message:`${e.name} cannot draw ${n} cards (only ${a} available)`}:{success:!0,message:"Draw operation valid"}},v=(e,n=null)=>{let a=null;n&&(a=u.getInstance(n));let r={...e};const s={player1:{drawnCards:[]},player2:{drawnCards:[]}};let i=5;if(a&&e.placedSections)try{i=a.getEffectiveShipStats(e.player1,e.placedSections).totals.handLimit,c("CARDS",`📊 Player 1 effective hand limit: ${i} (with placed sections: ${e.placedSections.join(", ")})`)}catch(l){console.warn("⚠️ Failed to calculate Player 1 effective stats, using default hand limit:",l)}else console.warn("⚠️ GameDataService not available, using default hand limit for Player 1");const t=Math.max(0,i-e.player1.hand.length);if(t>0){const l=p(e.player1,t);if(l.success){const f=e.player1.hand.length;r.player1=h(e.player1,t),s.player1.drawnCards=r.player1.hand.slice(f)}else console.warn(`Player 1 draw validation failed: ${l.message}`)}else c("CARDS",`🃏 Player 1 already at hand limit (${e.player1.hand.length}/${i})`);let d=5;if(a&&e.opponentPlacedSections)try{d=a.getEffectiveShipStats(e.player2,e.opponentPlacedSections).totals.handLimit,c("CARDS",`📊 Player 2 effective hand limit: ${d} (with placed sections: ${e.opponentPlacedSections.join(", ")})`)}catch(l){console.warn("⚠️ Failed to calculate Player 2 effective stats, using default hand limit:",l)}else console.warn("⚠️ GameDataService not available, using default hand limit for Player 2");const o=Math.max(0,d-e.player2.hand.length);if(o>0){const l=p(e.player2,o);if(l.success){const f=e.player2.hand.length;r.player2=h(e.player2,o),s.player2.drawnCards=r.player2.hand.slice(f)}else console.warn(`Player 2 draw validation failed: ${l.message}`)}else c("CARDS",`🃏 Player 2 already at hand limit (${e.player2.hand.length}/${d})`);return{player1:r.player1,player2:r.player2,drawResults:s}};export{h as drawCardsForPlayer,v as performAutomaticDraw,y as reshuffleDiscardIntoDeck,p as validateDrawOperation};
