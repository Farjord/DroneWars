import{d as i,G as u}from"./index-C4jkBQCS.js";const y=a=>{if(a.deck.length>0)return a;if(a.discardPile.length===0)return console.warn(`⚠️ ${a.name} has no cards left to draw (deck and discard both empty)`),a;const n=[...a.discardPile].sort(()=>.5-Math.random());return i("CARDS",`🔄 ${a.name} reshuffled ${n.length} cards from discard pile into deck`),{...a,deck:n,discardPile:[]}},h=(a,n)=>{if(n<=0)return a;let e={...a};e=y(e);const r=e.deck.length,s=Math.min(n,r);if(s===0)return console.warn(`⚠️ ${a.name} cannot draw any cards (no cards available)`),e;const d=e.deck.slice(0,s),t=e.deck.slice(s),c=[...e.hand,...d];return i("CARDS",`🃏 ${a.name} drew ${s} cards: ${d.map(o=>o.name).join(", ")}`),{...e,hand:c,deck:t}},p=(a,n)=>{if(n<=0)return{success:!0,message:"No cards to draw"};const e=a.deck.length+a.discardPile.length;return e===0?{success:!1,message:`${a.name} has no cards available to draw`}:n>e?{success:!1,message:`${a.name} cannot draw ${n} cards (only ${e} available)`}:{success:!0,message:"Draw operation valid"}},v=(a,n=null)=>{i("CARDS","🃏 Starting automatic draw phase for both players");let e=null;n&&(e=u.getInstance(n));let r={...a};const s={player1:{drawnCards:[]},player2:{drawnCards:[]}};let d=5;if(e&&a.placedSections)try{d=e.getEffectiveShipStats(a.player1,a.placedSections).totals.handLimit,i("CARDS",`📊 Player 1 effective hand limit: ${d} (with placed sections: ${a.placedSections.join(", ")})`)}catch(l){console.warn("⚠️ Failed to calculate Player 1 effective stats, using default hand limit:",l)}else console.warn("⚠️ GameDataService not available, using default hand limit for Player 1");const t=Math.max(0,d-a.player1.hand.length);if(t>0){const l=p(a.player1,t);if(l.success){const f=a.player1.hand.length;r.player1=h(a.player1,t),s.player1.drawnCards=r.player1.hand.slice(f)}else console.warn(`Player 1 draw validation failed: ${l.message}`)}else i("CARDS",`🃏 Player 1 already at hand limit (${a.player1.hand.length}/${d})`);let c=5;if(e&&a.opponentPlacedSections)try{c=e.getEffectiveShipStats(a.player2,a.opponentPlacedSections).totals.handLimit,i("CARDS",`📊 Player 2 effective hand limit: ${c} (with placed sections: ${a.opponentPlacedSections.join(", ")})`)}catch(l){console.warn("⚠️ Failed to calculate Player 2 effective stats, using default hand limit:",l)}else console.warn("⚠️ GameDataService not available, using default hand limit for Player 2");const o=Math.max(0,c-a.player2.hand.length);if(o>0){const l=p(a.player2,o);if(l.success){const f=a.player2.hand.length;r.player2=h(a.player2,o),s.player2.drawnCards=r.player2.hand.slice(f)}else console.warn(`Player 2 draw validation failed: ${l.message}`)}else i("CARDS",`🃏 Player 2 already at hand limit (${a.player2.hand.length}/${c})`);return i("CARDS","✅ Automatic draw phase completed"),{player1:r.player1,player2:r.player2,drawResults:s}};export{h as drawCardsForPlayer,v as performAutomaticDraw,y as reshuffleDiscardIntoDeck,p as validateDrawOperation};
